# rules.yaml
rules:
  # Rule 1: Avoid exposing mutable state (Guideline #4)
  - id: PROTECT_MUTABLE_STATE
    pattern: 'public\s+(List|Map|Set)\s+\w+\s*(=.*)?;'
    message: "Avoid exposing mutable collections directly - use defensive copying"
    severity: critical
    fix: |
      Make field private and provide accessor:
      - private final {type} {name};
      + public {type} get{Name}() {{
      +     return new {type}({name});
      + }}
    files: "*.java"

  # Rule 2: Avoid returning null (Guideline #3)
  - id: AVOID_NULL_RETURN
    pattern: 'return\s+null;'
    message: "Return Optional.empty() instead of null"
    severity: critical
    fix: "return Optional.empty();"
    files: "*.java"

  # Rule 3: Use modern collections (Guideline #6)
  - id: OBSOLETE_COLLECTION
    pattern: 'new\s+Vector\s*<.*>\s*\(\)'
    message: "Use ArrayList instead of obsolete Vector class"
    severity: warning
    fix: "new ArrayList<>()"
    files: "*.java"

  # Rule 4: Avoid generic exceptions (Guideline #5)
  - id: GENERIC_EXCEPTION
    pattern: 'catch\s*\(\s*Exception\s+\w+\s*\)'
    message: "Avoid catching generic Exception - specify concrete exception types"
    severity: warning
    fix: "catch (SpecificException e)  // e.g. IOException"
    files: "*.java"

  # Rule 5: Override hashCode with equals (Guideline #10)
  - id: MISSING_HASHCODE
    pattern: |
      @Override\s+
      public\s+boolean\s+equals\([^)]*\).*?\{[\s\S]*?\}(?!(.*?@Override.*?public\s+int\s+hashCode))
    message: "Must override hashCode() when overriding equals()"
    severity: critical
    fix: |
      @Override
      public int hashCode() {
          return Objects.hash({fields});
      }
    files: "*.java"

  # Rule 6: Use streams/lambdas (Guideline #2)
  - id: USE_STREAMS
    pattern: 'for\s*\([^)]+\)\s*\{[^}]*if\s*\([^)]+\)[^}]*}'
    message: "Replace loops with Java Streams API"
    severity: warning
    fix: |
      {collection}.stream()
          .filter(item -> {condition})
          .collect(Collectors.toList());
    files: "*.java"

  # Rule 7: Code to interfaces (Guideline #8)
  - id: CODE_TO_INTERFACES
    pattern: '\b(ArrayList|LinkedList|HashSet|HashMap)\s*<'
    message: "Declare with interface type (List/Set/Map) instead of concrete implementation"
    severity: warning
    fix: |
      {interface}<> instead of {concrete}<>
      Example: List<> instead of ArrayList<>
    files: "*.java"

  # Rule 8: Validate Optional access (Guideline #3 extension)
  - id: UNSAFE_OPTIONAL_ACCESS
    pattern: 'Optional\.\w+\(\)\.\w+\(\)'
    message: "Avoid unsafe Optional value access - use ifPresent()/orElse()"
    severity: warning
    fix: |
      Use safe access methods:
      optionalValue.ifPresent(v -> ...)
      optionalValue.orElse(...)
    files: "*.java"
